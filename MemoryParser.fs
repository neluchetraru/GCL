// Implementation file for parser generated by fsyacc
module MemoryParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "MemoryParser.fsp"

open GCLTypesAST

# 10 "MemoryParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ASSGN
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | SRB
  | SLB
  | TT
  | FF
  | UAND
  | UOR
  | AND
  | OR
  | NOT
  | EQ
  | NEQ
  | GT
  | GTE
  | LT
  | LTE
  | EOF
  | COMMA
  | VARNAME of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ASSGN
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SRB
    | TOKEN_SLB
    | TOKEN_TT
    | TOKEN_FF
    | TOKEN_UAND
    | TOKEN_UOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GTE
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_VARNAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_a
    | NONTERM_b
    | NONTERM_C

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ASSGN  -> 0 
  | TIMES  -> 1 
  | DIV  -> 2 
  | PLUS  -> 3 
  | MINUS  -> 4 
  | POW  -> 5 
  | LPAR  -> 6 
  | RPAR  -> 7 
  | SRB  -> 8 
  | SLB  -> 9 
  | TT  -> 10 
  | FF  -> 11 
  | UAND  -> 12 
  | UOR  -> 13 
  | AND  -> 14 
  | OR  -> 15 
  | NOT  -> 16 
  | EQ  -> 17 
  | NEQ  -> 18 
  | GT  -> 19 
  | GTE  -> 20 
  | LT  -> 21 
  | LTE  -> 22 
  | EOF  -> 23 
  | COMMA  -> 24 
  | VARNAME _ -> 25 
  | NUM _ -> 26 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ASSGN 
  | 1 -> TOKEN_TIMES 
  | 2 -> TOKEN_DIV 
  | 3 -> TOKEN_PLUS 
  | 4 -> TOKEN_MINUS 
  | 5 -> TOKEN_POW 
  | 6 -> TOKEN_LPAR 
  | 7 -> TOKEN_RPAR 
  | 8 -> TOKEN_SRB 
  | 9 -> TOKEN_SLB 
  | 10 -> TOKEN_TT 
  | 11 -> TOKEN_FF 
  | 12 -> TOKEN_UAND 
  | 13 -> TOKEN_UOR 
  | 14 -> TOKEN_AND 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_NOT 
  | 17 -> TOKEN_EQ 
  | 18 -> TOKEN_NEQ 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_GTE 
  | 21 -> TOKEN_LT 
  | 22 -> TOKEN_LTE 
  | 23 -> TOKEN_EOF 
  | 24 -> TOKEN_COMMA 
  | 25 -> TOKEN_VARNAME 
  | 26 -> TOKEN_NUM 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_a 
    | 3 -> NONTERM_a 
    | 4 -> NONTERM_a 
    | 5 -> NONTERM_a 
    | 6 -> NONTERM_a 
    | 7 -> NONTERM_a 
    | 8 -> NONTERM_a 
    | 9 -> NONTERM_a 
    | 10 -> NONTERM_a 
    | 11 -> NONTERM_a 
    | 12 -> NONTERM_a 
    | 13 -> NONTERM_b 
    | 14 -> NONTERM_b 
    | 15 -> NONTERM_b 
    | 16 -> NONTERM_b 
    | 17 -> NONTERM_b 
    | 18 -> NONTERM_b 
    | 19 -> NONTERM_b 
    | 20 -> NONTERM_b 
    | 21 -> NONTERM_b 
    | 22 -> NONTERM_b 
    | 23 -> NONTERM_b 
    | 24 -> NONTERM_b 
    | 25 -> NONTERM_b 
    | 26 -> NONTERM_b 
    | 27 -> NONTERM_C 
    | 28 -> NONTERM_C 
    | 29 -> NONTERM_C 
    | 30 -> NONTERM_C 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ASSGN  -> "ASSGN" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | SRB  -> "SRB" 
  | SLB  -> "SLB" 
  | TT  -> "TT" 
  | FF  -> "FF" 
  | UAND  -> "UAND" 
  | UOR  -> "UOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | GT  -> "GT" 
  | GTE  -> "GTE" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | VARNAME _ -> "VARNAME" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ASSGN  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | SRB  -> (null : System.Object) 
  | SLB  -> (null : System.Object) 
  | TT  -> (null : System.Object) 
  | FF  -> (null : System.Object) 
  | UAND  -> (null : System.Object) 
  | UOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | VARNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 13us; 65535us; 6us; 7us; 8us; 9us; 10us; 11us; 23us; 13us; 24us; 14us; 25us; 15us; 26us; 16us; 27us; 17us; 28us; 18us; 33us; 19us; 34us; 20us; 36us; 21us; 37us; 22us; 0us; 65535us; 2us; 65535us; 0us; 2us; 31us; 30us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 17us; 18us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 27us; 1us; 1us; 2us; 2us; 6us; 1us; 3us; 1us; 4us; 6us; 4us; 7us; 8us; 9us; 10us; 11us; 1us; 5us; 6us; 5us; 7us; 8us; 9us; 10us; 11us; 1us; 6us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 1us; 6us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 6us; 7us; 8us; 9us; 10us; 11us; 28us; 6us; 7us; 8us; 9us; 10us; 11us; 29us; 6us; 7us; 8us; 9us; 10us; 11us; 29us; 6us; 7us; 8us; 9us; 10us; 11us; 30us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 2us; 27us; 27us; 1us; 27us; 3us; 28us; 29us; 30us; 2us; 28us; 30us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 16us; 23us; 25us; 32us; 34us; 41us; 43us; 50us; 57us; 64us; 71us; 78us; 85us; 92us; 99us; 106us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 130us; 132us; 136us; 139us; 141us; 143us; 145us; 147us; |]
let _fsyacc_action_rows = 39
let _fsyacc_actionTableElements = [|1us; 32768us; 25us; 32us; 0us; 49152us; 2us; 32768us; 23us; 3us; 24us; 31us; 0us; 16385us; 1us; 16386us; 9us; 10us; 0us; 16387us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 1us; 16388us; 5us; 27us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 1us; 16389us; 5us; 27us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 6us; 32768us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 8us; 12us; 0us; 16390us; 1us; 16391us; 5us; 27us; 1us; 16392us; 5us; 27us; 1us; 16393us; 5us; 27us; 1us; 16394us; 5us; 27us; 1us; 16395us; 5us; 27us; 6us; 32768us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 7us; 29us; 5us; 16412us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 6us; 32768us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 8us; 35us; 5us; 16413us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 6us; 32768us; 1us; 25us; 2us; 26us; 3us; 23us; 4us; 24us; 5us; 27us; 8us; 38us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 0us; 16396us; 1us; 16411us; 24us; 31us; 1us; 32768us; 25us; 32us; 2us; 32768us; 0us; 33us; 9us; 34us; 6us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 9us; 37us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 1us; 32768us; 0us; 36us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 5us; 32768us; 3us; 8us; 4us; 6us; 6us; 28us; 25us; 4us; 26us; 5us; 0us; 16414us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 9us; 10us; 16us; 18us; 24us; 26us; 32us; 39us; 40us; 42us; 44us; 46us; 48us; 50us; 57us; 63us; 70us; 76us; 83us; 89us; 95us; 101us; 107us; 113us; 119us; 120us; 122us; 124us; 127us; 134us; 140us; 142us; 148us; 154us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 2us; 2us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; |]
let _fsyacc_reductions ()  =    [| 
# 255 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 264 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "MemoryParser.fsp"
                                                _1 
                   )
# 22 "MemoryParser.fsp"
                 : command));
# 275 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "MemoryParser.fsp"
                                                     VAR(_1) 
                   )
# 26 "MemoryParser.fsp"
                 : aexpr));
# 286 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "MemoryParser.fsp"
                                                     Num(_1) 
                   )
# 27 "MemoryParser.fsp"
                 : aexpr));
# 297 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "MemoryParser.fsp"
                                                     UMinusExpr(_2) 
                   )
# 28 "MemoryParser.fsp"
                 : aexpr));
# 308 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "MemoryParser.fsp"
                                                     UPlusExpr(_2) 
                   )
# 29 "MemoryParser.fsp"
                 : aexpr));
# 319 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "MemoryParser.fsp"
                                                   Array(_1,_3) 
                   )
# 30 "MemoryParser.fsp"
                 : aexpr));
# 331 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "MemoryParser.fsp"
                                                     PlusExpr(_1,_3) 
                   )
# 31 "MemoryParser.fsp"
                 : aexpr));
# 343 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "MemoryParser.fsp"
                                                     MinusExpr(_1,_3) 
                   )
# 32 "MemoryParser.fsp"
                 : aexpr));
# 355 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "MemoryParser.fsp"
                                                     TimesExpr(_1,_3) 
                   )
# 33 "MemoryParser.fsp"
                 : aexpr));
# 367 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "MemoryParser.fsp"
                                                     DivExpr(_1,_3) 
                   )
# 34 "MemoryParser.fsp"
                 : aexpr));
# 379 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "MemoryParser.fsp"
                                                     PowExpr(_1,_3) 
                   )
# 35 "MemoryParser.fsp"
                 : aexpr));
# 391 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "MemoryParser.fsp"
                                                     _2 
                   )
# 36 "MemoryParser.fsp"
                 : aexpr));
# 402 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "MemoryParser.fsp"
                                T 
                   )
# 40 "MemoryParser.fsp"
                 : bexpr));
# 412 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "MemoryParser.fsp"
                                F 
                   )
# 41 "MemoryParser.fsp"
                 : bexpr));
# 422 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "MemoryParser.fsp"
                                      UANDExpr(_1,_3) 
                   )
# 42 "MemoryParser.fsp"
                 : bexpr));
# 434 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "MemoryParser.fsp"
                                     UORExpr(_1,_3) 
                   )
# 43 "MemoryParser.fsp"
                 : bexpr));
# 446 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "MemoryParser.fsp"
                                     ANDExpr(_1,_3) 
                   )
# 44 "MemoryParser.fsp"
                 : bexpr));
# 458 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "MemoryParser.fsp"
                                    ORExpr(_1,_3) 
                   )
# 45 "MemoryParser.fsp"
                 : bexpr));
# 470 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "MemoryParser.fsp"
                                   NOTExpr(_2) 
                   )
# 46 "MemoryParser.fsp"
                 : bexpr));
# 481 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "MemoryParser.fsp"
                                    EQExpr(_1,_3) 
                   )
# 47 "MemoryParser.fsp"
                 : bexpr));
# 493 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "MemoryParser.fsp"
                                     NEQExpr(_1,_3) 
                   )
# 48 "MemoryParser.fsp"
                 : bexpr));
# 505 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "MemoryParser.fsp"
                                    GTExpr(_1,_3) 
                   )
# 49 "MemoryParser.fsp"
                 : bexpr));
# 517 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "MemoryParser.fsp"
                                     GTEExpr(_1,_3) 
                   )
# 50 "MemoryParser.fsp"
                 : bexpr));
# 529 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "MemoryParser.fsp"
                                    LTExpr(_1,_3) 
                   )
# 51 "MemoryParser.fsp"
                 : bexpr));
# 541 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "MemoryParser.fsp"
                                     LTEqExpr(_1,_3) 
                   )
# 52 "MemoryParser.fsp"
                 : bexpr));
# 553 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "MemoryParser.fsp"
                                         _2 
                   )
# 53 "MemoryParser.fsp"
                 : bexpr));
# 564 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "MemoryParser.fsp"
                                       ComposeMem(_1,_3) 
                   )
# 58 "MemoryParser.fsp"
                 : command));
# 576 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "MemoryParser.fsp"
                                             Assign(_1,_3) 
                   )
# 59 "MemoryParser.fsp"
                 : command));
# 588 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "MemoryParser.fsp"
                                                       AssignAt(_1,_3,_6) 
                   )
# 60 "MemoryParser.fsp"
                 : command));
# 601 "MemoryParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "MemoryParser.fsp"
                                                    AssignList(_1,_4) 
                   )
# 61 "MemoryParser.fsp"
                 : command));
|]
# 614 "MemoryParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
